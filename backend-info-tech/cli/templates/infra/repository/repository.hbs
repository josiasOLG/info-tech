import { I{{pascalCase name}}Repository } from "../../domain/I{{pascalCase name}}Repository";
import { {{pascalCase name}} } from "../../domain/{{pascalCase name}}";
import { {{pascalCase name}}Model } from "../mongoose/{{pascalCase name}}Model";
import { {{pascalCase name}}Mapper } from "../mongoose/{{pascalCase name}}Mapper";

export class {{pascalCase name}}Repository implements I{{pascalCase name}}Repository {
  async create(entity: {{pascalCase name}}): Promise<void> {
    const data = {{pascalCase name}}Mapper.toPersistence(entity);
    await {{pascalCase name}}Model.create(data);
  }

  async findById(id: string): Promise<{{pascalCase name}} | null> {
    const result = await {{pascalCase name}}Model.findById(id);
    return result ? {{pascalCase name}}Mapper.toDomain(result) : null;
  }

  async findAll(): Promise<{{pascalCase name}}[]> {
    const results = await {{pascalCase name}}Model.find();
    return results.map({{pascalCase name}}Mapper.toDomain);
  }

  async update(entity: {{pascalCase name}}): Promise<void> {
    await {{pascalCase name}}Model.findByIdAndUpdate(
      entity.id,
      {{pascalCase name}}Mapper.toPersistence(entity)
    );
  }

  async delete(id: string): Promise<void> {
    await {{pascalCase name}}Model.findByIdAndDelete(id);
  }
}
